buildscript {
    ext.publish_description = 'Contains different runners, they are the entry point for users.'
}

dependencies {
    compile prefixedProject('maven')
    compile prefixedProject('serialization')
    compile prefixedProject('gui')
    compile prefixedProject('manipulation')
    compile prefixedProject('jenkins')

    runtimeOnly "org.jetbrains.kotlin:kotlin-runtime:$kotlin_version"
    testCompile prefixedProject('maven').sourceSets.test.output
}

task dist {
    def outputDir = "${project.buildDir}/dist"
    def bats = file("src/main/").listFiles().findAll{ it.name.endsWith(".bat") }
    outputs.dir outputDir
    inputs.files bats
    inputs.files jar.outputs.files
    inputs.files sourceSets.main.runtimeClasspath

    doLast {
        copy {
            from bats
            into outputDir
        }
        copy {
            from sourceSets.main.runtimeClasspath.asFileTree.findAll { it.name.endsWith(".jar") }
            from jar.outputs.files
            into "$outputDir/lib"
        }
    }
}

task distZip(type: Zip) {
    def outputDir = file("${project.buildDir}/distZip")
    inputs.files dist
    outputs.dir outputDir
    from dist
    destinationDir outputDir
}


def htmlDir = file("${rootProject.buildDir}/html")
def jsonFile = file("$htmlDir/release.json")

String getDefinedParam(String name, String represent) {
    def prop = findProperty(name)
    if(prop == null) {
        throw new IllegalArgumentException("you need to specify the $represent with -P$name")
    }
    return prop
}

task json {
    def groupIdArg = 'g'
    def artifactIdArg = 'a'
    inputs.property(groupIdArg, findProperty(groupIdArg))
    inputs.property(artifactIdArg, findProperty(artifactIdArg))
    inputs.property('dr', findProperty('dr') ?: '^$')
    inputs.property('mpoff', findProperty('mpoff') ?: 'on')
    inputs.files dist
    outputs.file jsonFile
    doLast {
        def groupId = getDefinedParam(groupIdArg, "groupId")
        def artifactId = getDefinedParam(artifactIdArg, "artifactId")
        javaexec {
            workingDir = rootProject.projectDir
            classpath = fileTree("${project.buildDir}/dist/lib/")
            main = 'ch.loewenfels.depgraph.runner.Main'

            def dr = findProperty('dr') != null ? ["-dr=${findProperty('dr')}"] : []
            def mpOff = findProperty('mpoff') != null ? ['-mpoff'] : []
            args = ['json', groupId, artifactId, "${rootProject.projectDir}/repos", jsonFile.absolutePath] + dr + mpOff
        }
    }
}

task copyResources {
    inputs.files dist
    outputs.dir htmlDir
    doLast {
        mkdir(htmlDir)
        javaexec {
            workingDir = rootProject.projectDir
            classpath = fileTree("${project.buildDir}/dist/lib/")
            main = 'ch.loewenfels.depgraph.runner.Main'
            args = ['html', htmlDir.absolutePath]
        }
    }
}

task cleanHtmlDir(type: Delete){
    delete htmlDir
}

task html {
    dependsOn json
    dependsOn copyResources
    copyResources.mustRunAfter(json)
}

task releasable {
    inputs.files dist
    doLast {
        javaexec {
            workingDir = rootProject.projectDir
            classpath = fileTree("${project.buildDir}/dist/lib/")
            main = 'ch.loewenfels.depgraph.runner.Main'
            args = ['releasable', "${rootProject.projectDir}/repos"]
        }
    }
}

task pipeline {
    def updateDependencyJobArg = 'updateDependencyJob'
    def remoteRegexArg = 'remoteRegex'
    def remoteJobArg = 'remoteJob'
    def paramsArg = 'regexParams'
    def jenkinsfileArg = 'jenkinsfile'
    inputs.property(updateDependencyJobArg, findProperty(updateDependencyJobArg))
    inputs.property(remoteRegexArg, findProperty(remoteRegexArg))
    inputs.property(remoteJobArg, findProperty(remoteJobArg))
    inputs.property(paramsArg, findProperty(paramsArg) ?: '')
    inputs.property(jenkinsfileArg, findProperty(jenkinsfileArg) ?: '')
    inputs.files dist
    doLast {
        def updateDependencyJob = getDefinedParam(updateDependencyJobArg, updateDependencyJobArg)
        def remoteRegex = getDefinedParam(remoteRegexArg, remoteRegexArg)
        def remoteJob = getDefinedParam(remoteJobArg, remoteJobArg)
        def params = findProperty(paramsArg) != null ? ["-$paramsArg=${findProperty(paramsArg)}"] : []
        def jenkinsfile = findProperty(jenkinsfileArg) != null ? ["-$jenkinsfileArg=${findProperty(jenkinsfileArg)}"] : []
        javaexec {
            workingDir = rootProject.projectDir
            classpath = fileTree("${project.buildDir}/dist/lib/")
            main = 'ch.loewenfels.depgraph.runner.Main'
            args = ['pipeline', jsonFile.absolutePath, updateDependencyJob, remoteRegex, remoteJob] + params + jenkinsfile
        }
    }
}

task server {
    doLast {
        SimpleHttpFileServerFactory factory = new SimpleHttpFileServerFactory()
        factory.start(file("$rootProject.buildDir/html"), 8085)
        println("Server Started on 8085 CTRL+C to kill it")
        java.lang.Thread.sleep(Long.MAX_VALUE)
    }
}

task resourcesJar(type: Jar) {
    dependsOn cleanHtmlDir
    dependsOn copyResources
    copyResources.mustRunAfter(cleanHtmlDir)
    from htmlDir
    from "$projectDir/src/jenkins.pom"
    classifier 'resources'
}

ext.publish_artifacts += [resourcesJar, distZip]
