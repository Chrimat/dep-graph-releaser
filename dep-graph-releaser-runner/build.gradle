buildscript {
    ext.publish_description = 'Contains different runners, they are the entry point for users.'
}

dependencies {
    compile prefixedProject('maven')
    compile prefixedProject('serialization')
    compile prefixedProject('gui')

    runtimeOnly "org.jetbrains.kotlin:kotlin-runtime:$kotlin_version"
    testCompile prefixedProject('maven').sourceSets.test.output
}

task dist {
    def outputDir = "${project.buildDir}/dist"
    def bat = file("src/main/produce.bat")
    outputs.dir outputDir
    inputs.files bat
    inputs.files jar.outputs.files
    inputs.files sourceSets.main.runtimeClasspath

    doLast {
        copy {
            from bat
            into outputDir
        }
        copy {
            from sourceSets.main.runtimeClasspath.asFileTree.findAll { it.name.endsWith(".jar") }
            from jar.outputs.files
            into "$outputDir/lib"
        }
    }
}

task distZip(type: Zip) {
    def outputDir = file("${project.buildDir}/distZip")
    inputs.files dist
    outputs.dir outputDir
    from dist
    destinationDir outputDir
}

configure(project) {
    ext.publish_artifacts += [distZip]
}

def htmlDir = file("${rootProject.buildDir}/html")
def jsonFileName = 'release.json'
def jsonFile = file("$htmlDir/$jsonFileName")

task json {
    inputs.property('g', findProperty('g'))
    inputs.property('a', findProperty('a'))
    inputs.property('mpoff', findProperty('mpoff'))
    inputs.files dist
    outputs.file jsonFile
    doLast {
        def groupId = findProperty('g')
        def artifactId = findProperty('a')
        if (groupId == null) {
            throw new IllegalArgumentException("you need to specify the groupId with -Pg")
        }
        if (artifactId == null) {
            throw new IllegalArgumentException("you need to specify the artifactId with -Pa")
        }
        javaexec {
            classpath = fileTree("${project.buildDir}/dist/lib/")
            main = 'ch.loewenfels.depgraph.runner.MainKt'

            def mpOff = findProperty('mpoff') != null ? ['-mpoff'] : []
            args = ['json', groupId, artifactId, "${rootProject.projectDir}/repos", jsonFile.absolutePath] + mpOff
        }
    }
}

task html {
    inputs.files json
    inputs.files dist
    outputs.dir htmlDir

    doLast {
        mkdir(htmlDir)
        javaexec {
            classpath = fileTree("${project.buildDir}/dist/lib/")
            main = 'ch.loewenfels.depgraph.runner.MainKt'
            args = ['html', "./$jsonFileName", htmlDir.absolutePath]
        }
    }
}

task server {
    doLast {
        SimpleHttpFileServerFactory factory = new SimpleHttpFileServerFactory()
        factory.start(file("$rootProject.buildDir/html"), 8085)
        println("Server Started on 8085 CTRL+C to kill it")
        java.lang.Thread.sleep(Long.MAX_VALUE)
    }
}
