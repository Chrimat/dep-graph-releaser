project.description = 'Contains different runners, they are the entry point for users.'

dependencies {
    compile prefixedProject('maven')
    compile prefixedProject('serialization')
    compile prefixedProject('manipulation')

    runtimeOnly "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    testCompile prefixedProject('maven').sourceSets.test.output
}

task dist {
    def outputDir = "${project.buildDir}/dist"
    def batAndShs = file("src/main/").listFiles().findAll{ it.name.endsWith(".bat") || it.name.endsWith(".sh") }
    outputs.dir outputDir
    inputs.files batAndShs
    inputs.files jar.outputs.files
    inputs.files sourceSets.main.runtimeClasspath

    doLast {
        copy {
            from batAndShs
            into outputDir
        }
        copy {
            from sourceSets.main.runtimeClasspath.asFileTree.findAll { it.name.endsWith(".jar") }
            from jar.outputs.files
            into "$outputDir/lib"
        }
    }
}

task distZip(type: Zip) {
    def outputDir = file("${project.buildDir}/distZip")
    inputs.files dist
    outputs.dir outputDir
    from dist
    destinationDir outputDir
}


def htmlDir = file("${rootProject.buildDir}/html")
def jsonFile = file("$htmlDir/release.json")

String getDefinedParam(String name, String represent) {
    def prop = findProperty(name)
    if(prop == null) {
        throw new IllegalArgumentException("you need to specify the $represent with -P$name")
    }
    return prop
}

def execMain(commandLineArguments) {
    javaexec {
        workingDir = rootProject.projectDir
        classpath = fileTree("${project.buildDir}/dist/lib/")
        main = 'ch.loewenfels.depgraph.runner.Main'
        args = commandLineArguments
    }
}

task man {
    def commandArg = 'command'
    inputs.property(commandArg, findProperty(commandArg))
    inputs.files dist
    doLast {
        def command = findProperty(commandArg) != null ? ["-$commandArg=${findProperty(commandArg)}"] : []
        execMain(['man'] + command)
    }
}

def groupIdArg = 'gId'
def artifactIdArg = 'aId'
def dirArg = 'dir'
def defaultDirArg = "${rootProject.projectDir}/repos"

task json {
    def mvnIdsArg = 'mvnIds'
    def updateDependencyJobArg = 'updateDependencyJob'
    def defaultUpdateJob = "dgr-updater"
    def dryRunJobArg = 'dryRunJob'
    def defaultDryRunJob = "dgr-dry-run"
    def remoteRegexArg = 'remoteRegex'
    def libJobs = 'ch.loewenfels.depgraph:dgr-4'
    def defaultRemoteRegex = "\"(?!$libJobs).*#https://buildsystem.loewenfels.ch/jenkins\""
    def relativePathExcludeProjectsRegexArg = 'relativePathExcludeProjectsRegex'
    def defaultRelativePathExcludeProjectsRegex = '[^/]+/[^/]+/.+'
    def relativePathToGitRepoRegexArg = "relativePathToGitRepoRegex"
    def defaultRelativePathToGitRepoRegex = '^(.*)/\$'
    def relativePathToGitRepoReplacementArg = 'relativePathToGitRepoReplacement'
    def defaultRelativePathToGitRepoReplacement = 'ssh://gerrit.loewenfels.ch:29418/$1'
    def regexParamsArg = 'regexParams'
    def defaultRegexParamsArg = /
        (?!ch.loewenfels.depgraph:dgr-4).*#branch.name=master
        ch.loewenfels.depgraph:dgr-4#BRANCH=master;DO_RELEASE=true
        /.stripIndent()
    def disableRegexArg = 'disableRegex'
    def jobMappingArg = 'jobMapping'
    def commitPrefixArg = 'commitPrefix'
    def buildWithParamJobsArg = 'buildWithParamJobs'
    inputs.property(mvnIdsArg, findProperty(mvnIdsArg) ?: '')
    inputs.property(dirArg, findProperty(dirArg) ?: defaultDirArg)
    inputs.property(updateDependencyJobArg, findProperty(updateDependencyJobArg) ?: defaultUpdateJob)
    inputs.property(dryRunJobArg, findProperty(dryRunJobArg) ?: defaultDryRunJob)
    inputs.property(remoteRegexArg, findProperty(remoteRegexArg) ?: defaultRemoteRegex)
    inputs.property(relativePathExcludeProjectsRegexArg, findProperty(relativePathExcludeProjectsRegexArg) ?: defaultRelativePathExcludeProjectsRegex)
    inputs.property(relativePathToGitRepoRegexArg, findProperty(relativePathToGitRepoRegexArg) ?: defaultRelativePathToGitRepoRegex)
    inputs.property(relativePathToGitRepoReplacementArg, findProperty(relativePathToGitRepoReplacementArg) ?: defaultRelativePathToGitRepoReplacement)
    inputs.property(regexParamsArg, findProperty(regexParamsArg) ?: defaultRegexParamsArg)
    inputs.property(disableRegexArg, findProperty(disableRegexArg) ?: '^$')
    inputs.property(jobMappingArg, findProperty(jobMappingArg) ?: '')
    inputs.property(commitPrefixArg, findProperty(commitPrefixArg) ?: '')
    inputs.property(buildWithParamJobsArg, findProperty(buildWithParamJobsArg) ?: '')
    inputs.files dist
    outputs.file jsonFile
    doLast {
        def mvnIds = getDefinedParam(mvnIdsArg, "mvnIds")
        def dir = findProperty(dirArg) ?: defaultDirArg
        def updateDependencyJob = findProperty(updateDependencyJobArg) ?: defaultUpdateJob
        def dryRunJob = findProperty(dryRunJobArg) ?: defaultDryRunJob
        def remoteRegex = findProperty(remoteRegexArg) ?: defaultRemoteRegex
        def relativePathExcludeProjects = findProperty(relativePathExcludeProjectsRegexArg) ?: defaultRelativePathExcludeProjectsRegex
        def relativePathGitRepoRegex = findProperty(relativePathToGitRepoRegexArg) ?: defaultRelativePathToGitRepoRegex
        def relativePathGitRepoReplacement = findProperty(relativePathToGitRepoReplacementArg) ?: defaultRelativePathToGitRepoReplacement
        def params = ["-$regexParamsArg=${findProperty(regexParamsArg) ?: defaultRegexParamsArg}"]
        def disableRegex = findProperty(disableRegexArg) != null ? ["-$disableRegexArg=${findProperty(disableRegexArg)}"] : []
        def jobMapping = findProperty(jobMappingArg) != null ?
            ["-$jobMappingArg=${findProperty(jobMappingArg)}"] :
            ["-$jobMappingArg=" + """
                ch.loewenfels.depgraph:dgr-1=apnoea-test-1
                ch.loewenfels.depgraph:dgr-2=apnoea-test-2
                ch.loewenfels.depgraph:dgr-3=apnoea-test-3
                ch.loewenfels.depgraph:dgr-4=apnoea-test-4
                ch.loewenfels.depgraph:dgr-5=apnoea-test-5
                """.stripIndent()
            ]
        def commitPrefix = findProperty(commitPrefixArg) != null ? ["-$commitPrefixArg=${findProperty(commitPrefixArg)}"] : []
        def buildWithParamJobs = findProperty(buildWithParamJobsArg) != null ?
            ["-$buildWithParamJobsArg=${findProperty(buildWithParamJobsArg)}"] :
            ["-$buildWithParamJobsArg=\"$libJobs#maven#MVN_RELEASE_VERSION;MVN_DEV_VERSION;ADDITIONAL_PARAMS\""]

        execMain(
            ['json', mvnIds, dir, jsonFile.absolutePath, updateDependencyJob, dryRunJob, remoteRegex, relativePathExcludeProjects, relativePathGitRepoRegex, relativePathGitRepoReplacement] +
                params + disableRegex + jobMapping + commitPrefix + buildWithParamJobs
        )
    }
}

task cleanHtmlDir(type: Delete){
    delete htmlDir
}

task html {
    dependsOn json
    dependsOn prefixedProject('gui').tasks.htmlResources
}

task releasable {
    inputs.property(dirArg, findProperty(dirArg) ?: defaultDirArg)
    inputs.files dist

    doLast {
        def dir = findProperty(dirArg) ?: defaultDirArg
        execMain(['releasable', dir])
    }
}

task dependents {
    def relativePathExcludeProjectsRegexArg = 'relativePathExcludeProjectsRegex'
    def defaultRelativePathExcludeProjectsRegex = '[^/]+/[^/]+/.+'
    def relativePathToGitRepoRegexArg = "relativePathToGitRepoRegex"
    def defaultRelativePathToGitRepoRegex = '^(.*)/\$'
    def relativePathToGitRepoReplacementArg = 'relativePathToGitRepoReplacement'
    def defaultRelativePathToGitRepoReplacement = 'ssh://gerrit.loewenfels.ch:29418/$1'
    def formatArg = 'format'

    def psfArg = 'psf'
    inputs.property(groupIdArg, findProperty(groupIdArg))
    inputs.property(artifactIdArg, findProperty(artifactIdArg))
    inputs.property(dirArg, findProperty(dirArg) ?: defaultDirArg)
    inputs.property(relativePathExcludeProjectsRegexArg, findProperty(relativePathExcludeProjectsRegexArg) ?: defaultRelativePathExcludeProjectsRegex)
    inputs.property(formatArg, findProperty(formatArg) ?: 'list')
    inputs.property(relativePathToGitRepoRegexArg, findProperty(relativePathToGitRepoRegexArg) ?: defaultRelativePathToGitRepoRegex)
    inputs.property(relativePathToGitRepoReplacementArg, findProperty(relativePathToGitRepoReplacementArg) ?: defaultRelativePathToGitRepoReplacement)
    inputs.property(psfArg, findProperty(psfArg) ?: '')
    inputs.files dist
    doLast {
        def groupId = getDefinedParam(groupIdArg, "groupId")
        def artifactId = getDefinedParam(artifactIdArg, "artifactId")
        def dir = findProperty(dirArg) ?: defaultDirArg
        def relativePathExcludeProjects = findProperty(relativePathExcludeProjectsRegexArg) ?: defaultRelativePathExcludeProjectsRegex
        def nullableFormat = findProperty(formatArg)
        def format = nullableFormat != null ? ["-$formatArg=${nullableFormat}"] : []
        def relativePathGitRepoRegex = ["-$relativePathToGitRepoRegexArg=${findProperty(relativePathToGitRepoRegexArg) ?: defaultRelativePathToGitRepoRegex}"]
        def relativePathGitRepoReplacement = ["-$relativePathToGitRepoReplacementArg=${findProperty(relativePathToGitRepoReplacementArg) ?: defaultRelativePathToGitRepoReplacement}"]
        def psf = findProperty(psfArg) != null ? ["-$psfArg=${findProperty(psfArg) }"] : []

        execMain(['dependents', groupId, artifactId, dir, relativePathExcludeProjects] + format + relativePathGitRepoRegex + relativePathGitRepoReplacement + psf)
    }
}

task server {
    doLast {
        SimpleHttpFileServerFactory factory = new SimpleHttpFileServerFactory()
        factory.start(htmlDir, 8085)
        println("Server Started on 8085 CTRL+C to kill it")
        java.lang.Thread.sleep(Long.MAX_VALUE)
    }
}

task resourcesJar(type: Jar) {
    dependsOn prefixedProject('gui').tasks.htmlResources
    from htmlDir
    from "$projectDir/src/jenkins.pom"
    classifier 'resources'
}

tutteliPublish {
    artifacts.add(resourcesJar)
    artifacts.add(distZip)
}
